BEGIN TRANSACTION;

DROP VIEW IF EXISTS vote_count;
DROP TABLE IF EXISTS news;
DROP TABLE IF EXISTS vote;
DROP TABLE IF EXISTS restriction;
DROP TABLE IF EXISTS "user";

CREATE TABLE "user" (
	id SERIAL PRIMARY KEY,
	email TEXT NOT NULL UNIQUE,
	name TEXT,
	verified BOOLEAN NOT NULL DEFAULT(FALSE),
	password TEXT NOT NULL,
	city TEXT,
	admin BOOL NOT NULL DEFAULT(FALSE),
	registered TIMESTAMP NOT NULL DEFAULT(NOW())
);

CREATE TABLE restriction (
	id SERIAL PRIMARY KEY,
	created TIMESTAMP NOT NULL DEFAULT(NOW()),
	modified TIMESTAMP NOT NULL DEFAULT(NOW()),
	title TEXT NOT NULL,
	body TEXT NOT NULL,
	state TEXT CHECK (state IN ('NEW', 'APPROVED', 'REJECTED')),
	approver_id INTEGER REFERENCES "user"(id) ON DELETE SET NULL ON UPDATE CASCADE,
	user_id INTEGER REFERENCES "user"(id) ON DELETE SET NULL ON UPDATE CASCADE,
	user_name TEXT NOT NULL,
	user_city TEXT NOT NULL
);

CREATE TABLE vote (
	restriction_id INTEGER REFERENCES restriction(id) ON DELETE CASCADE ON UPDATE CASCADE,
	user_id INTEGER REFERENCES "user"(id) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY (restriction_id, user_id)
);

CREATE TABLE news (
	id SERIAL PRIMARY KEY,
	created TIMESTAMP NOT NULL DEFAULT(NOW()),
	modified TIMESTAMP NOT NULL DEFAULT(NOW()),
	title TEXT NOT NULL,
	body TEXT NOT NULL,
	user_id INTEGER REFERENCES "user"(id) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE VIEW vote_count AS SELECT restriction.id as restriction_id, COUNT(*) AS num FROM restriction
	LEFT OUTER JOIN vote ON (restriction.id = vote.restriction_id) WHERE vote.user_id IS NOT NULL
	GROUP BY restriction.id;

COMMIT;
